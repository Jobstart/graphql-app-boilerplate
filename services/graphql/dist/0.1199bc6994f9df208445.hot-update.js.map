{"version":3,"sources":["webpack:////Users/andrew/Projects/opensource/jobstart/graphql-app-boilerplate/services/graphql/src/index.js?6acf","webpack:////Users/andrew/Projects/opensource/jobstart/graphql-app-boilerplate/services/graphql/src/router.js?2305","webpack:///external \"debug\"?fb1a","webpack:///external \"bluebird\"?fb3e","webpack:////Users/andrew/Projects/opensource/jobstart/graphql-app-boilerplate/services/graphql/src/io/server.js?46e6","webpack:///external \"body-parser\"?4657","webpack:///external \"http\"?8e44"],"names":["use","req","res","next","r","log","ioConnectedPromise","workersConnected","httpServer","trace","process","exit","main","on","err","get","healthy","status","send","__DEV__","module","hot","accept","require","default","addStatusHandler","nextTick","app","server","createServer","listen","resolve","reject","error","message","then"],"mappings":";;;;;;;;;;;;;;uDAoCA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEI,wBAAIA,GAAJ,CAAQ,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX;AAAA,qBAAoBC,EAAEH,GAAF,EAAOC,GAAP,EAAYC,IAAZ,CAApB;AAAA,aAAR;AACAE,gBAAI,6BAAJ;AAHJ;AAAA,mBAIUC,kBAJV;;AAAA;AAKID,gBAAI,cAAJ;AALJ;AAAA,mBAMUE,gBANV;;AAAA;;AAQIF,gBAAI,mBAAJ;;AAEA,wCAAqBG,UAArB;;AAEAH;;AAZJ;AAAA;;AAAA;AAAA;AAAA;;AAgBII;AACAC,oBAAQC,IAAR,CAAa,CAAb;;AAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,I;;;;;AApCf;;;;AACA;;;;AAEA;;AAEA;;AAKA;;;;AACA;;;;;;;;AAEA,IAAIR,oBAAJ;;AAEAM,QAAQG,EAAR,CAAW,mBAAX,EAAgC,UAACC,GAAD;AAAA,SAASL,MAAM,mBAAN,EAA2BK,GAA3B,CAAT;AAAA,CAAhC;AACAJ,QAAQG,EAAR,CAAW,oBAAX,EAAiC,UAACC,GAAD;AAAA,SAASL,MAAM,oBAAN,EAA4BK,GAA5B,CAAT;AAAA,CAAjC;;AAEA,YAAIC,GAAJ,CAAQ,SAAR,EAAmB,UAACd,GAAD,EAAMC,GAAN;AAAA,SAAcc,UAAUd,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACD,QAAQ,IAAT,EAArB,CAAV,GAAiDf,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACD,QAAQ,MAAT,EAArB,CAA/D;AAAA,CAAnB;;AAEA,IAAIE,OAAJ,EAAa;AACX,MAAI,IAAJ,EAAgB;AACdd,QAAI,uCAAJ;;AAEAe,WAAOC,GAAP,CAAWC,MAAX,CAAkB,CAAlB,EAA8B,YAAM;AAClClB,UAAI,mBAAAmB,CAAQ,CAAR,EAAoBC,OAAxB;AACD,KAFD;;AAIAJ,WAAOC,GAAP,CAAWI,gBAAX,CAA4B,UAACR,MAAD,EAAY;AACtC,UAAIA,WAAW,OAAf,EAAwB;AACtBP,gBAAQgB,QAAR,CAAiB;AAAA,iBAAMhB,QAAQC,IAAR,CAAa,CAAb,CAAN;AAAA,SAAjB;AACD;AACF,KAJD;AAKD;AACF;;AAuBDC,O;;;;;;;;;;;;;;;ACzDA;;;;AACA;;;;AACA;;;;;;;;;;ACFA,kC;;;;;;ACAA,qC;;;;;;;;;;;;;;ACAA;;;;AACA;;;;AACA;;;;AACA;;;;AAIA;;;;AAFA,IAAMP,MAAM,qBAAM,mBAAN,CAAZ;;AAIO,IAAMsB,oBAAM,wBAAZ;;AAEP,IAAIX,UAAU,KAAd;;AAEO,IAAMY,0BAAS,eAAKC,YAAL,CAAkBF,GAAlB,CAAf;;AAEA,IAAMG,0BAAS,uBAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,SAAqBJ,OAAOE,MAAP,oBAAoB,eAAO;AAChF,QAAIhB,GAAJ,EAAS;AACPmB,yCAAiCnB,IAAIoB,OAArC;AACA,aAAOF,OAAOlB,GAAP,CAAP;AACD;AACDT;AACA,WAAO0B,SAAP;AACD,GAPsD,CAArB;AAAA,CAAZ,CAAf;;AASPD,OAAOK,IAAP,CAAY,YAAM;AAChB9B;AACD,CAFD,E;;;;;;;;;;;;;ACxBA,wC;;;;;;ACAA,iC","file":"0.1199bc6994f9df208445.hot-update.js","sourcesContent":["import Promise from 'bluebird';\nimport debug from 'debug';\n\nimport { app, server } from './io/server';\n\nimport {\n  HOSTNAME,\n  PORT\n} from '../config/environment';\n\nimport router from './router';\nimport connectSubscriptions from './io/subscription';\n\nlet r = router;\n\nprocess.on('uncaughtException', (err) => trace('UncaughtException', err));\nprocess.on('unhandledRejection', (err) => trace('unhandledRejection', err));\n\napp.get('/health', (req, res) => healthy ? res.status(200).send({status: 'up'}) : res.status(503).send({status: 'down'}));\n\nif (__DEV__) {\n  if (module.hot) {\n    log('[HMR] Waiting for server-side updates');\n\n    module.hot.accept('./router', () => {\n      r = require('./router').default;\n    });\n\n    module.hot.addStatusHandler((status) => {\n      if (status === 'abort') {\n        process.nextTick(() => process.exit(0));\n      }\n    });\n  }\n}\n\nasync function main () {\n  try {\n    app.use((req, res, next) => r(req, res, next));\n    log('awaiting io connected state');\n    await ioConnectedPromise;\n    log('io connected');\n    await workersConnected;\n\n    log('workers connected');\n\n    connectSubscriptions(httpServer);\n\n    log(`GraphQL listening on ${HOSTNAME}:${PORT}`);\n\n\n  } catch (e) {\n    trace(e);\n    process.exit(1);\n  }\n}\n\nmain();\n\n\n\n// WEBPACK FOOTER //\n// /Users/andrew/Projects/opensource/jobstart/graphql-app-boilerplate/services/graphql/src/index.js","import express from 'express';\nimport bodyParser from 'body-parser';\nimport debug from 'debug';\n\n\n\n// WEBPACK FOOTER //\n// /Users/andrew/Projects/opensource/jobstart/graphql-app-boilerplate/services/graphql/src/router.js","module.exports = require(\"debug\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"debug\"\n// module id = 8\n// module chunks = 0","module.exports = require(\"bluebird\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird\"\n// module id = 9\n// module chunks = 0","import http from 'http';\nimport express from 'express';\nimport Promise from 'bluebird';\nimport debug from 'debug';\n\nconst log = debug('graphql:io:server');\n\nimport { PORT } from '../../config/environment';\n\nexport const app = express();\n\nlet healthy = false;\n\nexport const server = http.createServer(app);\n\nexport const listen = new Promise((resolve, reject) => server.listen(PORT, err => {\n  if (err) {\n    error(`error booting server -> ${err.message}`);\n    return reject(err);\n  }\n  log(`server online`);\n  return resolve();\n}));\n\nlisten.then(() => {\n  log(`listening on port ${PORT}`);\n});\n\n\n\n// WEBPACK FOOTER //\n// /Users/andrew/Projects/opensource/jobstart/graphql-app-boilerplate/services/graphql/src/io/server.js","module.exports = require(\"body-parser\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"body-parser\"\n// module id = 12\n// module chunks = 0","module.exports = require(\"http\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"http\"\n// module id = 13\n// module chunks = 0"],"sourceRoot":""}